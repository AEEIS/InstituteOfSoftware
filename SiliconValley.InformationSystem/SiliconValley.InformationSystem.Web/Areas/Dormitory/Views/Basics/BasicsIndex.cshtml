
@{
    ViewBag.Title = "BasicsIndex";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link href="~/Scripts/dtree2.5.4/layui_ext/dtree/dtree.css" rel="stylesheet" />
<link href="~/Scripts/dtree2.5.4/layui_ext/dtree/font/dtreefont.css" rel="stylesheet" />
<div>
    <div id="left">
        <ul id="toolbarTree5" class="dtree" style="width:300px" data-id="0"></ul>
    </div>
    <div id="right">
        <table class="layui-hide" id="table0" lay-filter="table0"></table>
    </div>
</div>
<script src="~/Scripts/underscore.js"></script>
<script src="~/Areas/Dormitory/Script/operationdormxml.js"></script>

@section script{
    <script>
        layui.extend({
            dtree: '{/}/Scripts/dtree2.5.4/layui_ext/dleiool/dtree'
        }).use(['element', 'layer', 'table', 'code', 'util', 'dtree', 'form'], function () {

            var element = layui.element, layer = layui.layer, table = layui.table, util = layui.util, dtree = layui.dtree, form = layui.form, $ = layui.$;
            var jstungid, jsfloorid;
            $(function () {
                loadtree();
            });
            var myDTree = dtree.render({
                elem: "#toolbarTree5",
                url: '/Dormitory/DormitoryInfo/EstablishTree',
                formatter: {
                    title: function (data) {  // 示例给有子集的节点返回节点统计
                        var s = data.context;
                        if (data.children) {
                            s += '<span style=\'color:blue\'>(' + data.children.length + ')</span>';
                        }
                        return s;
                    }
                },
                initLevel: 1,
                nodeIconArray: { "3": { "open": "dtree-icon-pulldown", "close": "dtree-icon-pullup" } },  // 自定扩展的二级非最后一级图标，从1开始
                leafIconArray: { "11": "dtree-icon-star" },  // 自定义扩展的二级最后一级图标，从11开始
                icon: ["3", "11"], // 使用
                response: { statusCode: 200, rootName: "data", treeId: "nodeId", title: "context" },
                toolbar: true,
                toolbarWay: "fixed", // "contextmenu"：右键菜单（默认），"fixed"："固定在节点后","follow"："跟随节点动态呈现"
                toolbarFun: {
                    addTreeNode: function (treeNode, $div) { //添加树节点后调用的函数，用于用户自定义，如未指定则树不会发生变化
                        //location.reload();
                        reloaddtree();
                        console.log(treeNode);
                    },

                    editTreeNode: function (treeNode, $div) { //编辑树节点后调用的函数，用于用户自定义，如未指定则树不会发生变化
                        console.log(treeNode);
                        $.ajax({
                            url: '/Dormitory/DormitoryInfo/updatetung',
                            data: { TungName: treeNode.context, tungid: treeNode.nodeId },
                            type: 'GET',
                            success: function (successdata) {
                                if (successdata.Success) {
                                    layer.msg('操作成功', { icon: 6, time: 2000 }, function () {
                                        myDTree.changeTreeNodeEdit(true); // 调用内置函数，修改节点后改变节点内容。传入false，则树不会发生变化
                                    });
                                } else {
                                    layer.msg(successdata.Msg, { icon: 6, time: 2000 }, function () {

                                    });
                                }
                            },
                            error: function () {
                                layer.msg('网络异常！', { icon: 6, time: 2000 }, function () {
                                });
                            }
                        });

                    },

                    delTreeNode: function (treeNode, $div) { //删除树后调用的函数，用于用户自定义，如未指定则树不会发生变化
                        console.log(treeNode);
                        if (treeNode.level == "1") {
                            console.log("dong");
                            zhixing(treeNode.nodeId, "-1", true);
                        }
                        if (treeNode.level == "2") {
                            console.log("lou");
                            zhixing(treeNode.parentId, treeNode.nodeId, false);
                        }

                    },

                    loadToolbarBefore: function (buttons, param, $div) {
                        //console.log(buttons);
                        //console.log(param);
                        //console.log($div);
                        if (param.parentId != "0") { // 如果是叶子节点
                            buttons.addToolbar = "";  // 取消新增功能
                            buttons.editToolbar = "";  // 取消修改的功能
                        }
                        return buttons; // 将按钮对象返回
                    }
                }
            });
            dtree.on("node(toolbarTree5)", function (obj) {
                console.log(obj);
                var dtreeobj = obj.param;
                console.log(dtreeobj);

                //点击的是楼
                if (dtreeobj.level == "2") {
                    jstungid = dtreeobj.parentId;
                    jsfloorid = dtreeobj.nodeId;
                    loadroom(jstungid, jsfloorid);
                }
                //点击的是栋
                if (dtreeobj.level == "1") {
                    jstungid = dtreeobj.nodeId;
                    var arry = obj.childParams;
                    for (var i = arry.length - 1; i >= 0; i--) {
                        if (arry[i].parentId != dtreeobj.nodeId) {
                            arry.splice(i, 1);
                        }
                    }
                    arry.sort(sortBy('nodeId'));
                    jsfloorid = arry[0].nodeId;
                    loadroom(jstungid, jsfloorid);
                }
            })
            function sortBy(props) {
                return function (a, b) {
                    return a[props] - b[props];
                }
            }
            function zhixing(tungid, floorid, istung) {
                $.ajax({
                    url: '/Dormitory/DormitoryInfo/del',
                    data: { tungid: tungid, floorid: floorid, istung: istung },
                    type: 'GET',
                    success: function (successdata) {
                        if (successdata.Success) {
                            layer.msg('操作成功', { icon: 6, time: 2000 }, function () {
                                myDTree.changeTreeNodeDel(true); // 调用内置函数，删除节点后改变节点内容。传入false，则树不会发生变化
                            });
                        } else {
                            layer.msg(successdata.Msg, { icon: 6, time: 5000 }, function () {

                            });
                        }
                    },
                    error: function () {
                        layer.msg('网络异常！', { icon: 6, time: 2000 }, function () {
                        });
                    }
                });
            }

            //加载树
            function loadtree() {
                $.ajax({
                    url: '/Dormitory/DormitoryInfo/EstablishTree',
                    type: 'GET',
                    success: function (successdata) {
                        console.log(successdata);
                        // var nodes = JSON.parse(successdata);
                        //console.log(nodes);
                        //可以重载所有基础参数
                        myDTree.reload(
                            'demoTree',
                            {
                                data: successdata

                            });
                    },
                    error: function (errordata) {

                    }
                });
            }
        });



    </script>
}



