[{"questionid":"1031","answer":"\n\n                1.内存分配：静态变量在应用程序初始化时，即是在类被加载的时候成员变量即被初始化，就存在于内存当中,直到它所在的类的程序运行结束时才消亡； 而非静态变量需要被实例化后才会分配内存。非static修饰的成员变量是在对象new出来的时候划分存储空间，是与具体的对象绑定的，该成员变量仅为当前对象所拥有的。静态方法和静态变量创建后始终使用同一块内存，是连续的。非静态方法会存在于内存的多个地方，是离散的。static修饰的变量在加载的时候先于main方法加载在内存中的数据共享区-------方法区，而非static的变量在加载的时候，是要创建变量才加载在堆内存中的。一个static变量单独划分一块存储空间，不与具体的对象绑定在一起，该存储空间被类的各个对象所共享。static变量值在方法区加载一次，而非static在创建对象时会加载很多次。每次创建都会拷贝一份。2.生命周期：静态变量生存周期为应用程序的存在周期； 非静态变量的存在周期取决于实例化的类的存在周期。3.调用方式：静态变量只能通过“类.静态变量名”调用，类的实例不能调用；非静态变量当该变量所在的类被实例化后，可通过实例化的类名直接访问。对象在引用成员变量是直接通过类名.变量名调用，对象在引用实例变量时只能通过对象名.变量名调用。在类中调用成员变量时直接调用或者以类名.变量名方式调用，实例变量则用this或者直接调用。4.共享方式 ：静态变量是全局变量，被所有类的实例对象共享，即一个实例的改变了静态变量的值，其他同类的实例读到的就是变化后的值，线程安全的； 非静态变量是局部变量，不共享的,线程非安全的。5访问方式 ：静态成员不能访问非静态成员； 非静态成员可以访问静态成员。————————————————版权声明：本文为CSDN博主「菜鸟级的IT之路」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。原文链接：https://blog.csdn.net/WYpersist/java/article/details/80102500\n\n\n            ","questionScores":"7.5"},{"questionid":"1035","answer":"\n\n                “internal 修饰符可以用于类型或成员,使用该修饰符声明的类型或成员只能在同一程集内访问接口的成员不能使用 internal 修饰符值得注意的是,如果为 internal 成员加上了 protected 修饰符,这时的访问级别为 internal 或 protected\n\n\n            ","questionScores":"7.5"},{"questionid":"1036","answer":"\n\n                sealed 修饰符表示密封用于类时，表示该类不能再被继承，不能和 abstract 同时使用，因为这两个修饰符在含义上互相排斥用于方法和属性时，表示该方法或属性不能再被重写，必须和 override 关键字一起使用，因为使用 sealed 修饰符的方法或属性肯定是基类中相应的虚成员通常用于实现第三方类库时不想被客户端继承，或用于没有必要再继承的类以防止滥用继承造成层次结构体系混乱恰当的利用 sealed 修饰符也可以提高一定的运行效率，因为不用考虑继承类会重写该成员。\n\n\n            ","questionScores":"4.5"},{"questionid":"1040","answer":"\n\n                　this 是一个保留字，仅限于构造函数和方法成员中使用；　　在类的构造函数中出现表示对正在构造的对象本身的引用，在类的方法中出现表示对调用该方法的对象的引用，在结构的构造上函数中出现表示对正在构造的结构的引用，在结构的方法中出现表示对调用该方法的结果的引用；　　this 保留字不能用于静态成员的实现里，因为这时对象或结构并未实例化；　　在 C# 系统中，this 实际上是一个常量，所以不能使用 this++ 这样的运算；　　this 保留字一般用于限定同名的隐藏成员、将对象本身做为参数、声明索引访问器、判断传入参数的对象是否为本身。\n\n\n            ","questionScores":"4.5"},{"questionid":"1041","answer":"\n\n                可以需使用 new 修饰符显式声明，表示隐藏了基类中该函数的实现或增加 override 修饰符，表示抽象重写了基类中该函数的实现\n\n\n            ","questionScores":"6"}]