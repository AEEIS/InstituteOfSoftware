[{"questionid":"1035","answer":"\n\n                internal 修饰符可以用于类型或成员，使用该修饰符声明的类型或成员只能在同一程集内访问接口的成员不能使用 internal 修饰符值得注意的是，如果为 internal 成员加上了 protected 修饰符，这时的访问级别为 internal 或 protected。只是看字面意思容易弄错，许多人认为 internal protected 应该是“只有同一个程序集中的子类可以访问”，但其实它表示“同一个程序集中的所有类，以及所有程序集中的子类都可以访问”\n\n\n            ","questionScores":"7.5"},{"questionid":"1033","answer":"\n\n                ： extern 修饰符用于声明 由程序集外部实现的成员函数经常用于系统API函数的调用（通过 DllImport ）。注意，和DllImport一 起使用时要加上 static 修饰符也可以用于对于同一程序集不同版本组件的调用（用 extern 声明别名） 不能与 abstract 修饰符同时使用 \n\n\n            ","questionScores":"7.5"},{"questionid":"1040","answer":"\n\n                　this 是一个保留字，仅限于构造函数和方法成员中使用；　　在类的构造函数中出现表示对正在构造的对象本身的引用，在类的方法中出现表示对调用该方法的对象的引用，在结构的构造上函数中出现表示对正在构造的结构的引用，在结构的方法中出现表示对调用该方法的结果的引用；　　this 保留字不能用于静态成员的实现里，因为这时对象或结构并未实例化；　　在 C# 系统中，this 实际上是一个常量，所以不能使用 this++ 这样的运算；　　this 保留字一般用于限定同名的隐藏成员、将对象本身做为参数、声明索引访问器、判断传入参数的对象是否为本身。\n\n\n            ","questionScores":"4.5"},{"questionid":"1038","answer":"\n\n                索引器允许类或结构的实例就像数组一样进行索引。索引器形态类似于，不同之处在于它们的取值函数采用参数。这一功能在创建集合类的场合特别有用，而在其他某些情况下，比如处理大型文件或者抽象有些资源等，能让类具有类似数组行为也是非常有用的。\n\n\n            ","questionScores":"4.5"},{"questionid":"1045","answer":"\n\n                接口可以包含属性、方法、索引指示器和事件，但不能包含常量、域、操作符、构造函数和析构函数，而且也不能包含任何静态成员\n\n\n            ","questionScores":"6"}]